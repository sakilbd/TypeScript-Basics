//aggregation 

db.test.aggregate([
    //stage 1
    { $match: { gender: "Male", age: { $lt: 30 } } },
    //stage 2
    { $project: { gender: 1, name: 1, age: 1 } }  //it is the another way to use project 
])


db.test.aggregate([
    //stage 1
    { $match: { gender: "Male" } },
    //stage 2 
    { $addFields: {course:"level-2"} }, //does not modify documnet/data but add field in pipeline
    //stage 2
    { $project: { gender: 1, name: 1, course: 1 } }
])

db.test.aggregate([
    //stage 1
    { $match: { gender: "Male" } },
    //stage 2 
    { $addFields: { course: "level-2" } },
    //stage 3
    // { $project: { gender: 1, name: 1, course: 1 } },
    //stage 4
    { $out: "course-stdnets" }  // out creates different document
])

db.test.aggregate([
    //stage 1
    { $match: { gender: "Male" } },
    //stage 2 
    { $addFields: { course: "level-2" } },
    //stage 3
    // { $project: { gender: 1, name: 1, course: 1 } },
    //stage 4
    { $merge: "test" } //merges new field to existing test documnet
])

//$group
db.test.aggregate([
    //stage-1
{$group:{_id:"$address.country"}}  //nested value grouping

])

//gender grop er koita kore ase sheta ber kore with the following query 


db.test.aggregate([
    //stage-1
    { $group: { _id: "$gender", count: { $sum: 1 } } }

])
result: 
{
	"_id" : "Female",
	"count" : 52
},


/////
db.test.aggregate([
    //stage-1
    {
        $group: {
            _id: "$address.country", // does group by address.country
            count: { $sum: 1 },
            fullDoc: { $push: "$$ROOT" } //all data shows in fullDoc key
        },
       
        {
        $project: {
            'fullDoc.name': 1,
            'fullDoc.email': 1 //only name and email of fullDoc shown
        }
    }


])

#####
db.test.aggregate([
    //stage-1
    {
        $group: {
            _id: null,
            totalSalary: { $sum: "$salary" }, //sums salary keyd value 
            maxSalary: { $max: "$salary" }, //shows max of salary key
            minSalary: { $min: "$salary" },
            avgSalary: { $avg: "$salary" },
        },

    },
    //stage2
    {
        $project: {
            totalSalary: 1,
            averageSalary:"$avgSalary",//changes keyname to averageSalary and points to stage 1 $avgSalary
            rangeBetweenMaxandMin:{$subtract :["$maxSalary","$minSalary"]} //subtracts maxSalary and minSalary
        }
    }

############
db.test.aggregate([
    // stage-1

    { $unwind: "$friends" }, //breaks in single part of friend array

    {
        $group: { _id: "$friends", count: { $sum: 1 } } //groups friends and counts the number of names present the 
    }

])


####$unwind

db.test.aggregate([
    // stage-1

    { $unwind: "$interests" },

    {
        $group: {
            _id: "$age", interestPerAge: { $push: "$interests" }
        }
    }

])

########$bucket 
db.test.aggregate([
    //stage 1
    {
        $bucket: {
            groupBy: "$age",
            boundaries: [20, 40, 60, 80],
            default: "80 er uporer bura gula",
            output: {
                "count": { $sum: 1 },
                "name": { $push: "$name" }
            }
        }
    },
    //stage-2
    {
        $sort: { count: -1 }
    },
    {
        $limit: 5
    },
    {
        $project: { count: 1 }
    }

])

#########$facet
db.test.aggregate([
    //stage 1
    {
        $facet: {
            //pipeline 1
            "firndsCount": [

                //stage 1
                { $unwind: "$friends" },
                //stage 2

                { $group: { _id: "$friends", count: { $sum: 1 } } }
            ],
            //pipeline 2
            "educationCount": [

                //stage 1
                { $unwind: "$education" },
                //stage 2

                { $group: { _id: "$education", count: { $sum: 1 } } }
            ]
        }
    }

])


######## $lookup
db.orders.aggregate([
    {
    $lookup:
        {
        from: "test",
        localField: "userId",  // primary field (orders collection)
        foreignField: "_id", // foreigh field (test collection)
        as: "user"
        }
    }

])

###### Indexing (single index , compoung index)

db.getCollection("massiveData").createIndex({email:1}) //creating indexing assendingly by email
db.getCollection("massiveData").dropIndex({email:1}) //droping index

db.getCollection("massiveData").createIndex({about:"text}) //text indexing
db.getCollection("massiveData").find({$text:{$search:"dolor"}}).project({about:1})